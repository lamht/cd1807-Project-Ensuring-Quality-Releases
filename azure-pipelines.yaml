name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: 'myAgentPool'

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'azure'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@1
      displayName: 'Terrafom installation'
      # inputs:
      #   terraformVersion: '1.2.9'
    
    # - task: AzureCLI@2
    #   displayName: "Azure Env"
    #   inputs:
    #     azureSubscription: azure
    #     scriptType: bash
    #     addSpnToEnvironment: true
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       export ARM_CLIENT_ID=$servicePrincipalId
    #       export ARM_CLIENT_SECRET=$servicePrincipalKey
    #       export ARM_TENANT_ID=$tenantId
        
    # Run Terraform Init on the pipeline agent 
    - task: TerraformTaskV1@4
      displayName: "Terraform Init"
      inputs:
        provider: "azurerm"
        command: "init"
        workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: "Azuredevops"
        backendAzureRmStorageAccountName: "tfstate329432302"
        backendAzureRmContainerName: "tfstate"
        backendAzureRmKey: 'state.tfstate'
  
    - task: TerraformTaskV1@4
      displayName: "Terraform Plan"
      inputs:
        provider: "azurerm"
        command: "plan"
        workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'        
        commandOptions: '-out main.tfplan'
  
    - task: TerraformTaskV1@4
      displayName: "Terraform Apply"
      condition: eq(variables['terraformPlan.changesPresent'], 'true')
      inputs:
        provider: "azurerm"
        command: "apply"
        workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"        
        commandOptions: 'main.tfplan'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'  
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'        
        mergeTestResults: true
        testRunTitle: 'Regression test results'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-selenium-test

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi-test

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool: myAgentPool    
    environment: 'test-app'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: ''
              appName: 'lamhtMyapp2'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi-test/$(Build.BuildId)-fakerestapi.zip
          #--------------------------------------------#    
          # Stress Test
          - task: CmdLine@2
            displayName: 'Stress Test'
            inputs:
              script: |
                wget "https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.5.tgz"
                tar -xf apache-jmeter-5.5.tgz
                unzip -o $(Build.BuildId)-performancetests.zip
                ./apache-jmeter-5.5/bin/jmeter -n -t stress-test.jmx -l $(Build.BuildId)-jmeter_stress.log -e -o /home/devopsagent/$(Build.BuildId)_Stress_Test_Logs/
                cat jmeter.log
              workingDirectory: $(Pipeline.Workspace)/drop-performancetests
       
          # Endurance Test
          - task: CmdLine@2
            displayName: 'Endurance Test'
            inputs:
              script: |
                wget "https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.5.tgz"
                tar -xf apache-jmeter-5.5.tgz
                unzip -o $(Build.BuildId)-performancetests.zip
                ./apache-jmeter-5.5/bin/jmeter -n -t endurance-test.jmx -l $(Build.BuildId)-jmeter_endurance.log -e -o /home/devopsagent/$(Build.BuildId)_Endurance_Test_Logs/
                cat jmeter.log
              workingDirectory: $(Pipeline.Workspace)/drop-performancetests
               
          - task: ArchiveFiles@2
            displayName: Save JMeter Stress Test Report to Artifact
            inputs:
              rootFolderOrFile: '/home/devopsagent/$(Build.BuildId)_Stress_Test_Logs/'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
              verbose: true
          
          - task: ArchiveFiles@2
            displayName: Save JMeter Endurance Test Report to Artifact
            inputs:
              rootFolderOrFile: '/home/devopsagent/$(Build.BuildId)_Endurance_Test_Logs/'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
              verbose: true
      
          - task: PublishPipelineArtifact@1
            displayName: 'Publish JMeter Logs'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
              artifactName: 'drop-jmeter-logs'  
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name:  Test_vm
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-selenium-test
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/testuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/testuser/azagent/_work/1/drop-selenium-test/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/testuser/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/testuser/app
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."